using System;
//using System.Collections;
//using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

using Touchee;
using Touchee.Components;
using Touchee.Components.Media;

using Spotify.Media;

namespace Spotify {


    /// <summary>
    /// The viewtypes used
    /// </summary>
    public static class ViewTypes {
        public const string Track = "track";
        public const string Artist = "artist";
        public const string Album = "album";
        public const string Genre = "genre";
    }


    /// <remarks>
    /// Spotify plugin
    /// </remarks>
    public class Plugin : Base, IPlugin {


        #region Statics

        /// <summary>
        /// The API key for this program
        /// </summary>
        internal static byte[] APIKey = new byte[] {
            0x01,0xFE,0xB1,0x7F,0x56,0x77,0x04,0x8C,0x29,0xB1,0xAB,0x17,0xE5,0xB1,0xBA,0x66,
            0x48,0xE0,0x6C,0xA2,0xDE,0x0D,0x8C,0xDB,0xC4,0xA1,0x95,0x82,0xA1,0x2C,0x18,0x6B,
            0xA7,0x37,0x34,0x21,0x35,0x4C,0xF4,0x03,0x53,0x7E,0xBF,0x34,0x09,0x39,0xB4,0x0A,
            0x67,0xDC,0x6F,0xB1,0x3E,0xF1,0x47,0x7E,0x8E,0xE2,0x65,0x20,0xF0,0x61,0xD1,0xBC,
            0x96,0xA2,0xC3,0xC5,0xFD,0xFC,0xB0,0x36,0x65,0x06,0x2B,0x22,0x11,0xFD,0xF3,0xC5,
            0x5B,0xE5,0x21,0xF7,0x31,0x5B,0x93,0xB6,0x2D,0x23,0x0B,0xFC,0x97,0xB5,0xC7,0x89,
            0x31,0x99,0xB1,0xA0,0x30,0x2E,0xBC,0xDE,0xEA,0xBE,0xE8,0x89,0x7D,0xAE,0x7F,0xBB,
            0x39,0x8F,0x18,0x2B,0x0E,0x13,0x35,0x1F,0xB0,0x9E,0x06,0x5A,0x25,0xD8,0x5B,0x42,
            0x1D,0xAC,0x89,0xD7,0xB2,0x56,0xE6,0x44,0x3F,0xEB,0xF2,0x3B,0xDB,0x3B,0x57,0x9B,
            0x8A,0xE3,0x9B,0x4A,0x8F,0x67,0xF1,0x4F,0x47,0xC0,0xA6,0xEC,0xA3,0xF3,0xC9,0x63,
            0x07,0x39,0xA7,0xEE,0xCE,0xAE,0xFB,0x32,0xAD,0xD7,0x0A,0x75,0x32,0xDC,0xCB,0x6E,
            0x83,0xC4,0x91,0x7E,0x7F,0xA9,0xE7,0x98,0x36,0xD6,0xB9,0xC0,0x02,0x60,0xE5,0xC1,
            0x5A,0xBC,0xAB,0xC9,0x12,0x95,0x75,0xC6,0xFC,0x31,0x51,0xA7,0x93,0x69,0xD6,0x7D,
            0xAB,0xEE,0x5B,0x57,0x7B,0x96,0x65,0x54,0xD9,0x4F,0xF1,0xD9,0x39,0xEA,0xAE,0xE2,
            0x1D,0x63,0x83,0x5A,0x28,0x25,0x62,0x44,0x3A,0x32,0x72,0x1D,0xE3,0xC1,0xC3,0x0C,
            0x3F,0xD7,0x14,0xD4,0x24,0xA2,0xB5,0xC3,0xF6,0x47,0xB2,0x56,0xFC,0x14,0x57,0x40,
            0x9E,0x23,0xB3,0x7E,0xBB,0x43,0x75,0xDF,0x39,0x0D,0x3F,0x91,0x6D,0x08,0x59,0x6E,
            0x1F,0x0A,0x02,0xA3,0x10,0x30,0xAC,0x67,0x8C,0x6E,0x74,0xD8,0xC7,0x4D,0x04,0x53,
            0x0F,0xFA,0xCA,0xCE,0x1A,0x67,0x19,0x28,0x97,0xE2,0xC0,0xA9,0xD9,0x8F,0xA2,0x89,
            0x2D,0xDE,0xE7,0xA6,0x42,0x98,0x75,0xF7,0x9E,0x8E,0x68,0x51,0x80,0x63,0x34,0x97,
            0x5F
        };

        internal static Watcher Watcher { get; private set; }
        internal static ContentProvider ContentProvider { get; private set; }
        internal static Config Config { get; private set; }
        internal static SessionHandler SessionHandler;
        internal static IPluginContext Context { get; private set; }

        #endregion



        #region Privates

        ContentsHandler _contentsHandler;

        #endregion



        #region IPlugin implementation

        /// <summary>
        /// The name of this plugin
        /// </summary>
        public string Name { get { return "Spotify"; } }


        /// <summary>
        /// The description of this plugin
        /// </summary>
        public string Description { get { return "Plugin providing music from Spotify."; } }


        /// <summary>
        /// The version of this plugin
        /// </summary>
        public Version Version { get { return new Version(1, 0, 0, 0); } }


        /// <summary>
        /// Whether this plugin provides some front-end functionality
        /// </summary>
        public bool ProvidesFrontend { get { return true; } }


        /// <summary>
        /// Starts the plugin.
        /// </summary>
        /// <param name="config">The configuration object for this plugin</param>
        /// <param name="context">The context for this plugin</param>
        /// <returns>True if the plugin was successfully started</returns>
        public bool StartPlugin(Config config, IPluginContext context) {
            Plugin.Config = config;
            Plugin.Context = context;

            // Add content provider
            ContentProvider = new ContentProvider();
            PluginManager.Register(ContentProvider);
            
            // Start the watcher
            Watcher = new Watcher();
            PluginManager.Register(Watcher);

            // Bind to watching event
            Watcher.StartedWatching += StartedWatching;

            return true;
        }


        void SessionHandler_StateUpdated(SessionHandler sender) {
            this.SendStatus();
        }


        /// <summary>
        /// Called when the local medium has arrived.
        /// </summary>
        async void StartedWatching(IMediumWatcher watcher, Medium medium) {

            // Start session handler
            SessionHandler = new SessionHandler(APIKey);
            SessionHandler.StateUpdated += SessionHandler_StateUpdated;
            var session = await SessionHandler.Init();

            // Start contents handler
            _contentsHandler = new ContentsHandler(session);

        }


        /// <summary>
        /// Shuts down the plugin.
        /// </summary>
        /// <returns>True</returns>
        public bool StopPlugin() {

            // Stop the watcher(s)
            Watcher.UnWatchAll();

            // Unregister plugin
            PluginManager.Unregister(Watcher);
            PluginManager.Unregister(ContentProvider);
            PluginManager.Unregister(this);

            return true;
        }

        #endregion



        public void SendStatus() {
            Context.Server.Broadcast(
                "plugin",
                new {
                    spotify = new {
                        session = new SessionStatus(SessionHandler)
                    }
                }
            );
        }


    }

}
